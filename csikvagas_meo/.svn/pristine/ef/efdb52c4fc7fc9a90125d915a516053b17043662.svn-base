using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using System.IO.Ports;
using System.Threading;
using System.ComponentModel;
using System.Drawing;
using e77.MeasureBase;
using e77.MeasureBase.GUI;
using System.Diagnostics;
using System.IO;
using System.Configuration;
using Npgsql;
using WinFormBlankTest.UI.Forms;
using WinFormBlankTest.UI.Panels;
using System.Text;
using WinFormBlankTest.UI.Chart;
using WinFormBlankTest.UI.Forms.Other_Forms;
using WinFormBlankTest.UI.Forms.Classes_for_Show_DataGrid;
using WinFormBlankTest.UI.Forms.Result_Forms_With_DataGrid;

namespace WinFormBlankTest
{
    static class Program
    {
        #region Variables

        public static bool firstFill = false;
        public static List<List<string>> rollids = new List<List<string>>();
        public static List<string> snAndRollID = new List<string>();
        public static int AlltogetherAccuracyStripCount = 0;
        public static double master_calibration;
        public static string master_lot_id;
        public static CounterPanel counter;
        public static string dbConnection;
        public static DetailedPanel[] myForm = new DetailedPanel[20];
        public static UserPanel[] panelForUser = new UserPanel[20];
        public static SerialPort[] portsAvailable = new SerialPort[20];
        public static Form main;
        public static Form user;
        public static int OutOfRangeCount_Homo=0;
        public static bool LastStepIsOne;
        public static string SN;
        public static bool IsLOTReady;


         public static List<string> SelectedSNIDsInLimitBlank = new List<string>();
        public static List<string> SelectedSNIDsInLimitHomogenity = new List<string>();
        public static List<string> CentralBlankSN = new List<string>();
        public static List<string> CentralHomogenitySN = new List<string>();
        private static int count=0;
       
         public static NpgsqlDataReader datar;
        private static int BlankIsValidTubeCount;
        private static int snCountForHomogenity;
        private static int snCountForBlank;
        //private static bool condition;
        public static string SelectedLotToMeasure;

        public static string Roll_ID;
        public static bool IsRollReady;
        public static int Measuring_tubus;
        public static Dictionary<string,int> HomogenityValidTubeCount=new Dictionary<string,int>() ;

        public static List<string> homogenityAndblankIsValidInRoll = new List<string>();
        public static List<string> homogenityAndblankIsValidInLot = new List<string>();
        public static List<string> blankIsValidInRoll = new List<string>();
        public static List<string> blankIsValidInLot = new List<string>();

        public static List<string> centralLotIDsHomogenity = new List<string>();
        public static List<string> centralRollIDsHomogenity = new List<string>();

        public static List<string> centralLotIDsBlank=new List<string>();
        public static List<string> centralRollIDsBlank = new List<string>();
        // public static List<string> CentralSNIDsForHomogenity=new List<string>();
        
        public static int centralLOTCount;
         public static string LOT_ID;
        public static Device dev = new Device();
        public static bool IsDialogShown = false;
        public static bool IsBatteryShown = false;
        public static bool IsBarCodeOk = false;
        public static bool IsLogging = false;
        public static int portnumber = 0;
        public static int month;
        public static int LotCount;
        public static bool Remeasure;
        public static string remeasuredMeasureType;
        public static string measureType;
        public static string centralQuery = "select count(pk_id) from blank_test_averages where blank_is_valid=true";
        public static string valid_blank_test_ids = "select distinct lot_id from blank_test_averages where blank_is_valid=true and invalidate=false and remeasured=false";
        public static  BackgroundWorker worker = new BackgroundWorker();
        public static RollMeanBlankCurrent chartofBlank;
        public static bool IsSecondRun = false;
        public static List<string> CentralIDs = new List<string>();
        readonly static object locker = new object();
        public static string BarCode;
        public static double Humidity;
        public static double HTC;
        public static DateTime ExpirityDate;
        public static int Number = 0;


      
        public static int Round;
        public static string Accuracy_sample_blood_vial_ID;
        public static int BarcodeNumber = 0;
        public static int ValuesID;
        public static double Temperature;
        public static bool firstslot;
        public static int storedGlus;

        public static BindingSource centralBindingSrc = new BindingSource();

        private static bool condition;


        private static Dictionary<string, double> ValueToSN = new Dictionary<string, double>();
        private static Dictionary<string, double> ValueToRollID = new Dictionary<string, double>();
        private static Dictionary<string, string> RollIDToSN = new Dictionary<string, string>();
        private static Dictionary<string, double> DiffToRollID = new Dictionary<string, double>();
        private static Dictionary<string, int> CountInRoll = new Dictionary<string, int>();
        public static int BlankMeasuredStripCount = 0;
        public static int HomogenityMeasuredStripCount = 0;
        private static double correctGluDiffFromAvg;
        public static List<int> HomogenityInRangeGlusCount = new List<int>();
        public static List<double> HomogenityInRangeGlusValue = new List<double>();
        public static int g = 0;
        public static List<string> HomogenityInRangeSNsIDs = new List<string>();
        public static List<string> validRolls;
        public static Accuracy_vials_form acc_vials_form;
        private static int rollCounter;
        public static int PortCount;

       

        public static double HomogenityLimitAvg;
        public static double BlankLimitAvg;
        public static int sn = 1;
        public static List<double> BlankDiff = new List<double>();
        public static List<double> HommDiff = new List<double>();

        public static List<double> SNnanosAVG = new List<double>();
        public static List<string> CentralSNIDsForHomogenity = new List<string>();
        public static List<double> SNglusAVG = new List<double>();
        public static List<double> SNIDs = new List<double>();
        public static List<double> DiffereneceFromAVGBlank = new List<double>();
        public static Dictionary<string, List<string>> BestRoll = new Dictionary<string, List<string>>();
        public static Dictionary<string, List<double>> BestGlu = new Dictionary<string, List<double>>();

        public static List<double> DiffereneceFromAVGHomogenity = new List<double>();
        public static List<string> snIDOfRoll = new List<string>();
        public static int tubes_count_in_act_roll;
        public static List<string> snThisRoll = new List<string>();


        #endregion

        #region Lists and Dictionaries
        public static Dictionary<double, string> glusAndNanoAmperAVGs = new Dictionary<double, string>();
        public static List<double> AllDiffs = new List<double>();
       
        private static List<int> skippedIndexes = new List<int>();
        public static List<double> AllGlus = new List<double>();
        private static List<double> TubesAVG = new List<double>();
        public static List<double> glusValues = new List<double>();
        public static List<string> HomogenityInRangeRollsIDs = new List<string>();
        public static List<string> AllRolls = new List<string>();
        public static Dictionary<string, string> lotid_roll_id = new Dictionary<string, string>();
        public static List<string> CentralSNIDForBlank = new List<string>();
        public static List<bool> stripInTubes = new List<bool>();
        public static List<double> glusAVGs = new List<double>();
        public static List<double> nanosAVGs = new List<double>(); 
        #endregion
        #region Delegate to close window

        delegate void CloseWindowDelegate();
        public static void CloseWindow()
        {
            if (user.InvokeRequired)
            {
                user.Invoke(new CloseWindowDelegate(CloseWindow));
            }
            else
                user.Close();
        }

        #endregion
        public  const string ADMIN_PASSWORD="/77Erulez";
        public  const string MEO_LEADER_PASSWORD = "/abrakadabra";
        public const string BLANK_TEST_ARG = "Blank Teszt";
        public const string HOMOGENITY_TEST_ARG = "Homogenity Teszt";
        public const string ACCURACY_TEST_ARG = "Accuracy Teszt";
        /// <summary>
        /// The main entry point for the application.
        /// </summary>        
        public static void Main(string[] args)
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
           
          

            TraceHelper.SetupListener();
            AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler(GuiErrorHandling.DefaultUnhandledExceptionEventHandler);
            Application.ThreadException += GuiErrorHandling.DefaultUnhandledExceptionEventHandler;


            ProductSelectorWindow selector = new ProductSelectorWindow(new string[] {BLANK_TEST_ARG ,HOMOGENITY_TEST_ARG , ACCURACY_TEST_ARG});
            selector.ShowDialog();
            string argument = string.Empty;
           switch( Convert.ToString((selector.Controls["comboBox1"] as ComboBox).SelectedItem))
            {
                case BLANK_TEST_ARG:
                    argument="/blank";
                    break;
                case HOMOGENITY_TEST_ARG:
                    argument = "/homogenity";
                    break;
                case ACCURACY_TEST_ARG:
                    argument = "/accuracy";
                    break;

                default:return;

            }



            ProcessDBHost();
            ProcessAccess(new string[] { argument });

            if (argument == "/accuracy")
            {
                acc_vials_form = new Accuracy_vials_form();
            }
            
           

            Trace.TraceInformation("Blank,Accuracy and Homogenity Test Started...");

            new BlankTestSwVersion();
            Trace.TraceInformation("Application: Blank test and Homogenity test check application ,Sw Version:{0}", BlankTestSwVersion.TheSwVersion.SwVersions);
            Trace.TraceInformation("SwVersion Initialized and trace Started.");

            new BlankTestEnvironment();
            if (BlankTestEnvironment.TheEnvironmentId.Init())
                return;

            Trace.TraceInformation("Environment Initialized");
            GenerateUIAndStartApp(new string[] { argument });
        }

        #region Methods
        static void worker_DoWork(object sender, DoWorkEventArgs e)
        {

        }


        public static void ProcessDBHost()
        {

            if (Properties.Settings.Default.DBConnection.Equals("local"))
            {
                dbConnection = Properties.Settings.Default.DBLocalConnectionString;
            }
            else if (Properties.Settings.Default.DBConnection.Equals("debug"))
            {
                dbConnection = Properties.Settings.Default.DBDebugConnection;
            }
            else if (Properties.Settings.Default.DBConnection.Equals("release"))
            {
                dbConnection = Properties.Settings.Default.DBReleaseConnection;
            }

        }

        public static void ProcessAccess(string[] arguments)
        {
            if (arguments.Contains("$invalidate"))
            {
                BlankTestEnvironment.AccessRights.Add("invalidate");
            }
            if (arguments.Contains("$remeasure"))
            {
                BlankTestEnvironment.AccessRights.Add("remeasure");
            }
            if (arguments.Contains("$showdata"))
            {
                BlankTestEnvironment.AccessRights.Add("showdata");
            }
        }
        private static void ProcessArgs(string[] arguments)
        {
            if (arguments.Length < 1)
            {
                throw new ArgumentException("A /blank,/accuracy vagy /homogenity kapcsolót definiálni kell");
            }
            if (arguments.Contains("/blank"))
            {
                measureType = "blank";
            }
            if (arguments.Contains("/meo"))
            {
                measureType = "meo";
            }
            if (arguments.Contains("/homogenity"))
            {
                measureType = "homogenity";
            }
            if (arguments.Contains("/accuracy"))
            {
                measureType = "accuracy";

            }
            if (arguments.Contains("/show"))
            {
                measureType = "show";
            }
            if (arguments.Contains("/showall"))
            {
                measureType = "showall";
            }
            if (arguments.Contains("/print"))
            {
                measureType = "print";
            }
            if (arguments.Contains("/invalidate"))
            {
                measureType = "invalidate";
            }
        }


        public static int GetMonth()
        {
            month = System.DateTime.Now.Month;
            return month;
        }
        public static void CreateTablePanel()
        {
            MainWindow.dynamicTableLayoutPanel.Location = new System.Drawing.Point(0, 0);
            MainWindow.dynamicTableLayoutPanel.Name = "TableLayoutPanel1";
            MainWindow.dynamicTableLayoutPanel.Size = new System.Drawing.Size(Screen.PrimaryScreen.WorkingArea.Width, Screen.PrimaryScreen.WorkingArea.Height);
            MainWindow.dynamicTableLayoutPanel.ColumnCount = 4;
            MainWindow.dynamicTableLayoutPanel.RowCount = 4;
            MainWindow.dynamicTableLayoutPanel.Controls.Add(new CounterPanel(Program.LotCount));
                
        }

        public static double StandardDeviation(this IEnumerable<double> values)
        {
            double avg = values.Average();
            return Math.Sqrt(values.Average(v => Math.Pow(v - avg, 2)));
        }
        public static void CreateTablePanelForUser()
        {
            UserWindow.userTables.Location = new System.Drawing.Point(0, 0);
            UserWindow.userTables.Name = "TableLayoutPanel1";
            UserWindow.userTables.Size = new System.Drawing.Size(Screen.PrimaryScreen.WorkingArea.Width, Screen.PrimaryScreen.WorkingArea.Height);
            UserWindow.userTables.ColumnCount = 4;
            UserWindow.userTables.RowCount = 5;
        } 
        #endregion

        #region Delegates
        delegate void AddTableToMainDelegate();
        public static void AddTableToMain()
        {
            if (main.InvokeRequired)
            {
                main.Invoke(new AddTableToMainDelegate(AddTableToMain));

            }
            else
            {
                MainWindow.dynamicTableLayoutPanel.Controls.Add(myForm[portnumber]);
            }
        }

        delegate void AddDetailedPanelToMainDelegate(DetailedPanel detailedPanel);
        private static void AddDetailedPanelToMain(DetailedPanel detailedPanel)
        {
            if (main.InvokeRequired)
            {
                main.Invoke(new AddDetailedPanelToMainDelegate(AddDetailedPanelToMain));
            }
            else
            {
                main.Controls.Add(myForm[portnumber]);

            }
        }

        delegate void AddCounterPanelDelegate(CounterPanel counter, int tubuscount);
        private static void AddCounterPanel(CounterPanel counter, int tubuscount)
        {
            counter.Show();
            if (UserWindow.userTables.InvokeRequired)
            {
                UserWindow.userTables.Invoke(new AddCounterPanelDelegate(AddCounterPanel), counter, tubuscount);
            }
            else
            {
                if (Properties.Settings.Default.AutoSize)
                {
                    UserWindow.userTables.AutoSize = true;
                }               

                for (int i = 0; i < UserWindow.userTables.Controls.Count; i++)
                {
                    UserWindow.userTables.Controls[i].Name = i.ToString();
                }

                counter.Show();
            }
        } 
        #endregion

        /// <summary>
        /// This function is initialize all 16 ports, create the 16 panels for those 
        /// </summary>
        public static void InitAllPort()
        {
            lock (locker)
            {
                SerialPort port;
                string[] ports = new string[20];

                if (Properties.Settings.Default.IsVirtualPorts)
                {
                    ports = new string[] { "COM20", "COM21", "COM22", "COM23", "COM24", "COM25", "COM26", "COM27" };
                }
                else if (Properties.Settings.Default.OpenAllPorts)
                {
                    ports = SerialPort.GetPortNames();
                }
                else
                {
                    ports = new string[] { "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9", "COM10", "COM11", "COM12", "COM13", "COM14", "COM15", "COM16" };
                }
                List<Device> deviceList = new List<Device>();
                Dictionary<UserPanel, string> panelnames = new Dictionary<UserPanel, string>();
               
                foreach (string item in ports)
                {                   
                    port = new SerialPort(item);
                   
                    if (!port.IsOpen)
                            port.Open();  
                    
                    port.BaudRate = 2400;
                    port.DataBits = 8;
                    port.Parity = Parity.Odd;
                    port.StopBits = StopBits.One;
                    port.Handshake = Handshake.None;
                    port.WriteTimeout = 700;
                    port.ReadTimeout = 700;

                    port.DtrEnable = true;
                    port.RtsEnable = true;

                    portsAvailable[portnumber] = port;  
                    panelForUser[portnumber] = new UserPanel(port);

                    UserWindow.userTables.Controls.Add(panelForUser[portnumber]);
                    panelForUser[portnumber].Text = port.PortName;
                    panelForUser[portnumber].Size = new Size(Screen.PrimaryScreen.WorkingArea.Width / 4, Screen.PrimaryScreen.WorkingArea.Height / 5);
                    Device dev = new Device(port);
                    myForm[portnumber] = new DetailedPanel(port, panelForUser[portnumber], dev);
                    myForm[portnumber].Width = 250;
                    myForm[portnumber].Height = 200;

                    AddDetailedPanelToMain(myForm[portnumber]);
                   
                    myForm[portnumber].Text = port.PortName;
                    myForm[portnumber].Show();

                    portnumber++;
                }

                AddCounterPanel(counter, Program.LotCount);
            }
        }
       

        /// <summary>
        /// start App and create UI without the Program need to be restarted
        /// </summary>
        public static void GenerateUIAndStartApp(string[] a)
        {
            ProcessArgs(a);

            if (a.Contains(ADMIN_PASSWORD) && !a.Contains(MEO_LEADER_PASSWORD))
            {
                Program.AccessRight = ADMIN_ACCESSRIGHT;
            }
            else if ((!a.Contains(ADMIN_PASSWORD) && a.Contains(MEO_LEADER_PASSWORD)))
            {
                Program.AccessRight = MEO_LEADER_ACCESSRIGHT;
            }
            else
                Program.AccessRight = "null";

            if (Program.Remeasure)
            {
                Program.Remeasure = false;

                if (Program.remeasuredMeasureType == "homogenity")
                {
                    Program.measureType = "homogenity";
                }
                else
                    Program.measureType = "blank";
            }
            if (Program.measureType=="invalidate")
            {
                new LotNumberForm().ShowDialog();
                return;
            }
            if (Program.measureType == "show")
            {
                new LotNumberForm().ShowDialog();
                return;
            }
            else if (Program.measureType == "showall")
            {
               
                new LotNumberForm().ShowDialog();
                return;
            }
            else if (Program.measureType == "print")
            {
                new LotNumberForm().ShowDialog();
                Environment.Exit(Environment.ExitCode);
            }
            else if (Program.measureType == "meo")
            {
                CreateCentralUIPanel();
                Environment.Exit(Environment.ExitCode);
            }
            else if (Program.measureType != "accuracy")
            {
                new TubeCountInRollForm().ShowDialog();
            }
           
            #region accuracy
            if (Program.measureType == "accuracy")
            {
                using (NpgsqlConnection conn = new NpgsqlConnection(Program.dbConnection))
                {
                    try
                    {
                        conn.Open();
                        
                       #region Get lot_ids which are valid result has at blank test,and not measured
		                 using (NpgsqlCommand central_comm = new NpgsqlCommand(valid_blank_test_ids, conn))
                        {
                           
                            #region Get lot_id where blank is ok
                            using (NpgsqlDataReader dr = central_comm.ExecuteReader())
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {

                                        blankIsValidInLot.Add(Convert.ToString(dr["lot_id"]));
                                    }
                                    dr.Close();
                                }
                                else
                                {
                                    dr.Close();
                                    Trace.TraceWarning("No valid blank test, query: {0}", central_comm.CommandText);
                                }
                            }
                        } 
                    	#endregion
                            #endregion
                            condition = blankIsValidInLot.Count >= 1;
                            while (condition)
                            {
                                foreach (string lot in blankIsValidInLot)
	                            {		 
	
                                   #region Get That lot_id and roll_ids where blank_is_ok and check homogenity_result if the same lot and which roll has valid result

                                        using (NpgsqlCommand comm_valid_ids_together = new NpgsqlCommand(string.Format("select distinct lot_id from homogenity_result where lot_id='{0}' and invalidate=false and homogenity_is_valid=true and not_h62_is_valid=true and out_of_range_is_valid=true and remeasured=false", lot), conn))
                                        {
                                            using (NpgsqlDataReader dr_valid = comm_valid_ids_together.ExecuteReader())
                                            {
                                                if (dr_valid.HasRows)
                                                {
                                                    while (dr_valid.Read())
                                                    {                                                      
                                                        if (!homogenityAndblankIsValidInLot.Contains(Convert.ToString(dr_valid["lot_id"])))
                                                        {
                                                            homogenityAndblankIsValidInLot.Add(Convert.ToString(dr_valid["lot_id"]));
                                                        }

                                                    }
                                                    dr_valid.Close();
                                                }
                                                else
                                                {
                                                    dr_valid.Close();
                                                    Trace.TraceWarning("No Valid result from lot_id={0} in Homogenity ", lot);
                                                }
                                            }
                                        }
                                }
                                        #endregion
                               
                                new LotNumberForm(homogenityAndblankIsValidInLot).ShowDialog();

                                #region Get rolls from the filtered lots
		                        
                                    #region Get roll_id for previously found lot_id where blank_ok=true
                                    using (NpgsqlCommand centralRolls = new NpgsqlCommand(string.Format("select distinct roll_id from blank_test_averages where invalidate=false and blank_is_valid=true and lot_id='{0}' and remeasured=false", Program.SelectedLotToMeasure), conn))
                                    {

                                        using (datar = centralRolls.ExecuteReader())
                                        {

                                            if (datar.HasRows)
                                            {
                                                while (datar.Read())
                                                {
                                                    if (!blankIsValidInRoll.Contains(Convert.ToString(datar["roll_id"])))
                                                    {
                                                        blankIsValidInRoll.Add(Convert.ToString(datar["roll_id"]));
                                                    }

                                                }
                                                condition = false;
                                                datar.Close();
                                            }
                                            else
                                            {
                                                datar.Close();
                                                Trace.TraceWarning("No valid blank test for lot_id:{0} ", Program.SelectedLotToMeasure);
                                            }
                                        }
                                    #endregion
                                    }
                                    #region For each roll at previously selected lot, and all the roll_id where blank is valid
                                     homogenityAndblankIsValidInRoll=new List<string>();
                                       homogenityAndblankIsValidInLot=new List<string>();

                                    #region Get roll_ids from the selected lot where the first two test is valid
		                            foreach (string roll in blankIsValidInRoll)
                                    {

                                        #region Get That roll_ids where blank_is_ok and check homogenity_result if the same lot and which roll has valid result that contains to that lot
                                        using (NpgsqlCommand comm_valid_ids_together = new NpgsqlCommand(string.Format("select distinct roll_id from homogenity_result where lot_id='{0}' and roll_id='{1}'and invalidate=false and homogenity_is_valid=true and not_h62_is_valid=true and out_of_range_is_valid=true and remeasured=false", Program.SelectedLotToMeasure, roll), conn))
                                        {
                                            using (NpgsqlDataReader dr_valid = comm_valid_ids_together.ExecuteReader())
                                            {
                                                if (dr_valid.HasRows)
                                                {
                                                    while (dr_valid.Read())
                                                    {

                                                        if (!homogenityAndblankIsValidInRoll.Contains(Convert.ToString(dr_valid["roll_id"])))
                                                        {
                                                            homogenityAndblankIsValidInRoll.Add(Convert.ToString(dr_valid["roll_id"]));
                                                        }
                                                       

                                                    }
                                                    dr_valid.Close();
                                                }
                                                else
                                                {
                                                    dr_valid.Close();
                                                    Trace.TraceWarning("No Valid result from lot_id={0} and roll_id={1} in Homogenity ", Program.SelectedLotToMeasure, roll);
                                                }
                                            }
                                        }
                                        #endregion

                                    } 
	                            #endregion
                                    #endregion
                                
	                            #endregion
                                int tubes_in_homogenity_measure;
                                    foreach (string niceRoll in homogenityAndblankIsValidInRoll)
                                    {
                                        using (NpgsqlCommand comm_valid_ids_together = new NpgsqlCommand(string.Format("select tube_count from homogenity_result where lot_id='{0}' and roll_id='{1}'and invalidate=false and remeasured=false and homogenity_is_valid=true and not_h62_is_valid=true and out_of_range_is_valid=true", Program.SelectedLotToMeasure, niceRoll), conn))
                                        {
                                            HomogenityValidTubeCount.Add(niceRoll,Convert.ToInt32(comm_valid_ids_together.ExecuteScalar()));
                                           // snCountForHomogenity = HomogenityValidTubeCount * 4;
                                        }
                                        using (NpgsqlCommand comm_valid_ids_together_blank = new NpgsqlCommand(string.Format("select COUNT(sn) from blank_test_result where lot_id='{0}' and roll_id='{1}'and invalidate=false and code=170 and glu<>0", Program.SelectedLotToMeasure, niceRoll), conn))
                                        {
                                            BlankIsValidTubeCount = (Convert.ToInt32(comm_valid_ids_together_blank.ExecuteScalar())/2);
                                            snCountForBlank = BlankIsValidTubeCount * 2;
                                        }
                                         HomogenityValidTubeCount.TryGetValue(niceRoll,out tubes_in_homogenity_measure);
                                         for (int tube_id = 1; tube_id <= tubes_in_homogenity_measure; tube_id++)
                                         {
                                             CentralSNIDsForHomogenity.Add(Convert.ToString(tube_id));
                                         }
                                         for (int sn = 1; sn <= tubes_in_homogenity_measure; sn++)
                                            {
                                                Trace.TraceInformation("sn: {0}", sn);
                                                using (NpgsqlCommand getBlankTubes = new NpgsqlCommand(string.Format("SELECT AVG(blank_test_result.glu) as AVG FROM homogenity_test LEFT JOIN blank_test_result ON homogenity_test.fk_blank_test_result_id = blank_test_result.pk_id where blank_test_result.glu!=0 and homogenity_test.invalidate=false and homogenity_test.strip_ok=True and blank_test_result.invalidate=False and homogenity_test.sn='{2}' and homogenity_test.roll_id='{1}' and homogenity_test.lot_id='{0}' and blank_test_result.code=777 and homogenity_test.invalidate=False and blank_test_result.invalidate=False", Program.SelectedLotToMeasure, niceRoll, sn), conn))
                                                {
                                                    Trace.TraceInformation("query: {0}", getBlankTubes.CommandText);
                                                    using (NpgsqlDataReader dr = getBlankTubes.ExecuteReader())
                                                    {
                                                        if (dr.HasRows)
                                                        {
                                                            while (dr.Read())
                                                            {
                                                                if (dr["AVG"]!=DBNull.Value)
                                                                {

                                                                    HomogenityInRangeRollsIDs.Add(niceRoll);
                                                                    HomogenityInRangeGlusCount.Add(g++);
                                                                    g++;
                                                                    HomogenityInRangeGlusValue.Add(Convert.ToDouble(dr["AVG"]));
                                                                    HomogenityInRangeSNsIDs.Add(string.Format("{0}",sn));
                                                                    Trace.TraceInformation("AVG: {0}", dr["AVG"]);
                                                                    AllRolls.Add(niceRoll);
                                                                    glusAVGs.Add(Convert.ToDouble(dr["AVG"]));

                                                                }  
                                                            }
                                                            dr.Close();
                                                            stripInTubes = new List<bool>();
                                                        }
                                                        else
                                                        {
                                                            Trace.TraceError("No result in Program central query: query: {0}", getBlankTubes);
                                                            dr.Close();
                                                        }
                                                    }
                                                }
                                            }
                                        #region tubesAVG At BlankTest
                                           for (int serialn = 1; serialn <= snCountForBlank; serialn = serialn + 2)
                                        {
                                                CentralSNIDForBlank.Add(Convert.ToString(serialn));
                                                Trace.TraceInformation("sn: {0}", serialn);

                                                //SELECT blank_test_result.code,blank_test_result.glu,blank_test_result.invalidate,homogenity_test.strip_ok,homogenity_test.fk_blank_test_result_id,homogenity_test.roll_id,homogenity_test.lot_id,homogenity_test.invalidate,homogenity_test.sn FROM homogenity_test LEFT JOIN blank_test_result ON homogenity_test.fk_blank_test_result_id = blank_test_result.pk_id where blank_test_result.glu!=0 and homogenity_test.strip_ok=True and blank_test_result.invalidate=False and homogenity_test.roll_id='1' and homogenity_test.lot_id='111111' and blank_test_result.code=777 
                                                using (NpgsqlCommand getTubes = new NpgsqlCommand(string.Format("SELECT AVG(blank_test_result.glu) as Nano FROM homogenity_test LEFT JOIN blank_test_result ON homogenity_test.fk_blank_test_result_id = blank_test_result.pk_id where blank_test_result.glu!=0 and homogenity_test.strip_ok=True and blank_test_result.invalidate=False and homogenity_test.roll_id='{1}' and homogenity_test.lot_id='{0}' and blank_test_result.code=777", Program.SelectedLotToMeasure, niceRoll, serialn), conn))
                                                {
                                                    
                                                    Trace.TraceInformation("query: {0}",getTubes.CommandText);
                                                    using (NpgsqlDataReader dr = getTubes.ExecuteReader())
                                                    {
                                                        if (dr.HasRows)
                                                        {
                                                            while (dr.Read())
                                                            {
                                                                Trace.TraceInformation("nanoAVG: {0}", dr["Nano"]);                                    
                                                                nanosAVGs.Add(Convert.ToDouble(dr["Nano"]));                                                               
                                                            
                                                            }
                                                            dr.Close();
                                                        }
                                                        else
                                                        {
                                                            Trace.TraceError("No result in Program central query: query: {0}", getTubes);
                                                            dr.Close();
                                                        }
                                                    }
                                                }
                                        }

                                        #endregion
                                           g = 0;
                                    }//end of foreach     
                                    rollids.Add(HomogenityInRangeRollsIDs);   
                                    validRolls = HomogenityInRangeRollsIDs.Distinct<string>().ToList<string>();
                            }//end of while(condition=there is valid lot at blank
                            List<double> glus = new List<double>();
                        List<double> nanos=new List<double>();                            
                              
                        glus.AddRange(glusAVGs);                           
                        nanos.AddRange(nanosAVGs);                           
                          
                        GetDiffereneceFromAVG(glus,AllRolls, HomogenityLimitAvg, BlankLimitAvg, CentralSNIDsForHomogenity,CentralSNIDForBlank,nanos,DiffereneceFromAVGBlank,DiffereneceFromAVGHomogenity);
                        SelectTheBestTubes(CentralSNIDsForHomogenity, DiffereneceFromAVGHomogenity, DiffereneceFromAVGBlank);
                        new CentralVialSelection(Program.SelectedLotToMeasure,BestRoll,BestGlu,DiffereneceFromAVGHomogenity,rollTubeCount,HomogenityInRangeGlusValue,HomogenityInRangeSNsIDs,HomogenityInRangeRollsIDs).ShowDialog();    
                        
                    }catch (Exception ex)
                    {
                        Trace.TraceError("Exception in getting central_lot.Exception:{0},\nMessage:{1}", ex.InnerException,ex.Message);
                    }
                    finally
                    {                    
                        conn.Close();
                        Trace.TraceInformation("Central query finished, accuracy_vials_form will be shown");
                      
                        acc_vials_form.ShowDialog();
                    }

                }//End of NpgsqlConnection
            }//if Program.measureType==accuracy
            #endregion
          
            if (Program.measureType != "accuracy")
            {
                CreateCentralUIPanel();
            }
            else if (Program.measureType == "accuracy")
            {
                for (int i = 1; i <= 6; i++)
                {
                    BarcodeNumber = 0;
                    for (int j = 1; j <= 3; j++)
                    {
                        #region Set Icon to unmeasured
                        foreach (Control item in UserWindow.userTables.Controls)
                        {
                            if (item is UserPanel)
                            {
                                foreach (Control bt in item.Controls)
                                {
                                    if (bt is Button
                                        && bt.Name == "button1")
                                    {
                                        Image image1 = Properties.Resources._801;
                                        ((Button)bt).Image = image1;
                                    }
                                }
                            }
                        }

                        Trace.TraceInformation("Image is set to unmeasured");
                        acc_vials_form.LOT = Program.LOT_ID;
                        #endregion
                        Program.Round = j;
                        Program.Accuracy_sample_blood_vial_ID = string.Format("{0}",i);
                     
                        MessageCompletedEventArgs.blood_vial_id = Program.Accuracy_sample_blood_vial_ID;

                        Trace.TraceInformation("Blood vial started");
                       if ((i==1)
                           &&(j==1))
                       {
                           Trace.TraceInformation("CreateCentralUIPanel() method started");
                           CreateCentralUIPanel();
                       }else
                           CreateAccuracyUIPanel();

                       Trace.TraceInformation("Program after CentralUIPanel() method, i:{0};j:{1}", i, j);
                    }
                }
            }//else if measureType=="accuracy"   
        }
        public static List<double> AllGlusFromSelected = new List<double>();

        public static int[] rollTubeCount = new int[20];

        /// <summary>
        /// Central vial selection
        /// </summary>
        /// <param name="SNIDs"></param>
        /// <param name="DiffereneceFromAVGHomogenity"></param>
        /// <param name="DiffereneceFromAVGBlank"></param>
        private static void SelectTheBestTubes(List<string> SNIDs, List<double> DiffereneceFromAVGHomogenity, List<double> DiffereneceFromAVGBlank)
        {           
            int tubes;  
            string rollAsString=string.Empty;
        
            Dictionary<string,string> items=new Dictionary<string,string>();
                        /*roll,sn*/
           
            try
            {
                int rollCount = 0;
                foreach (string roll in BestRoll.Keys)
                {
                    ///Get tubes count in roll
                    HomogenityValidTubeCount.TryGetValue(roll, out tubes);
                    rollTubeCount[rollCount] = tubes;
                    rollCount++;
                }

                Trace.TraceInformation("Differences count {0}", DiffereneceFromAVGHomogenity.Count);
                Trace.TraceInformation("Differences:\n");

                for (int sn = 1; sn <= DiffereneceFromAVGHomogenity.Count; sn++)
                {
                    AllDiffs.Add(DiffereneceFromAVGHomogenity[sn - 1]);
                    Trace.TraceInformation("Diff: {0}", DiffereneceFromAVGHomogenity[sn - 1]);
                }
                #region Skip the greatest value                
                while (AllDiffs.Count > 24)
                {
                    double max = AllDiffs.Max();                   
                    int maxindex=MaxIndex(AllDiffs);                 
                    Trace.TraceInformation("Maxindex: {0}, MaxDifference: {1}", maxindex, max);
                    DiffereneceFromAVGHomogenity.RemoveAt(maxindex);
                    AllDiffs.RemoveAt(maxindex);                    
                    AllRolls.RemoveAt(maxindex);
                    glusAVGs.RemoveAt(maxindex);
                    HomogenityInRangeRollsIDs.RemoveAt(maxindex);
                    HomogenityInRangeGlusValue.RemoveAt(maxindex);
                    HomogenityInRangeSNsIDs.RemoveAt(maxindex);  
                    count++;
                 
                }
                #endregion
            }catch (Exception ex)
            {
                Trace.TraceError("Exception:{0}", ex.StackTrace);
                throw new ArgumentException("Central Selection Exception"); 

            }finally
            {
                Trace.TraceInformation("All differences count: {0}",AllDiffs.Count);
                Trace.TraceInformation("All  homogenity in range sn ids count: {0}", HomogenityInRangeSNsIDs.Count);    
            }
        }

        /// <summary>
        /// Returns the maxindex from a list
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="sequence"></param>
        /// <returns></returns>
        public static int MaxIndex<T>(this IEnumerable<T> sequence)
                 where T : IComparable<T>
        {
            int maxIndex = -1;
            T maxValue = default(T); 

            int index = 0;
            foreach (T value in sequence)
            {
                if (value.CompareTo(maxValue) > 0 || maxIndex == -1)
                {
                    maxIndex = index;
                    maxValue = value;
                }
                index++;
            }
            return maxIndex;
        }
        
        public static IEnumerable<string> allSN = new List<string>();
        public static int InOneRoundAccuracyStripCount;
        public  const string MEO_LEADER_ACCESSRIGHT="meo_leader";
        public  const string ADMIN_ACCESSRIGHT = "admin";
       
        /// <summary>
        /// Get the difference between homogenity limit avg and the tube avg
        /// </summary>
        /// <param name="glusAVGs"></param>
        /// <param name="rolls"></param>
        /// <param name="HomogenityLimitAVG"></param>
        /// <param name="BlankLimitAvg"></param>
        /// <param name="Homogenity_SNs"></param>
        /// <param name="Blank_SNs"></param>
        /// <param name="nanosAVGs"></param>
        /// <param name="difFromAvgRefBlank"></param>
        /// <param name="diffFromAVGRefHomogenity"></param>
        public static void GetDiffereneceFromAVG(List<double> glusAVGs, List<string> rolls, double HomogenityLimitAVG, double BlankLimitAvg, List<string> Homogenity_SNs, List<string> Blank_SNs,
            List<double> nanosAVGs, List<double> difFromAvgRefBlank, List<double>  diffFromAVGRefHomogenity)
        {
            string testtype=string.Empty;
            int counter = 0;           

            HomogenityLimitAvg = (Properties.Settings.Default.HOMOGENITY_LIMIT_AVG);
            BlankLimitAvg = (Properties.Settings.Default.BLANK_LIMIT_AVG);
            


            rollCounter = 0;
            foreach (string rollID in HomogenityValidTubeCount.Keys)
            {
                HomogenityValidTubeCount.TryGetValue(rollID, out tubes_count_in_act_roll);
                counter = 0;
         
                while ((validRolls[rollCounter].Equals(rollID)
                    && (counter < tubes_count_in_act_roll)))                    
                {
                    Trace.TraceInformation("Roll ID: {0}",rollID);                  
                    Trace.TraceInformation(string.Format("Roll: {1}  SN: {0}", HomogenityInRangeSNsIDs[counter],rollID));
                    Trace.TraceInformation(string.Format("Value: {1}  Count of centrals: {0}", HomogenityInRangeGlusCount[counter], HomogenityInRangeGlusValue[counter]));

                    glusValues.Add(HomogenityInRangeGlusValue[counter]);
                    snIDOfRoll.Add(HomogenityInRangeSNsIDs[counter]);
                  
                    counter++;
                }
                BestGlu.Add(rollID, glusValues);
                BestRoll.Add(rollID,snIDOfRoll);
              
                snIDOfRoll=new List<string>();
                glusValues = new List<double>();
               
                rollCounter++;
            }
            


            counter=0;
            for (int Troll = 1; Troll <= HomogenityInRangeRollsIDs.Count; Troll++)
			{               
                if (BestRoll.Keys.Contains<string>(string.Format("{0}",Troll)))
	            {
		           BestRoll.TryGetValue(string.Format("{0}",Troll),out snThisRoll);  
                   Trace.TraceInformation(string.Format("Roll: {1}  SN: {0}",snThisRoll ,Troll));
                             
                    if (BestGlu.Keys.Contains<string>(string.Format("{0}",Troll)))	                           
                    {                                    
                        BestGlu.TryGetValue(string.Format("{0}",Troll),out TubesAVG);
                                     
                        foreach (double gluvalue in TubesAVG)                                  
                        { 
                            correctGluDiffFromAvg = Math.Abs(Math.Round(HomogenityLimitAvg - gluvalue, 5));
                            DiffereneceFromAVGHomogenity.Add(correctGluDiffFromAvg);
                            Trace.TraceInformation(string.Format("Roll: {1}  AVG: {0} DifferenceFromAVG: {2}", gluvalue, Troll, correctGluDiffFromAvg));
                        }     
                    }
	            }
			}   
            Trace.TraceInformation("GetDifferenceFromAVG finihed");
        }
               
        /// <summary>
        /// CreateAccuracyUIPanel
        /// </summary>
        private static void CreateAccuracyUIPanel()
        {
            CreateTablePanel();

            main = new MainWindow();
            counter = new CounterPanel(Program.LotCount);
            Trace.TraceInformation("Panels creation started");
            CreateTablePanelForUser();
            user = new UserWindow();
            Trace.TraceInformation("MainPanel showed");
            // worker.DoWork += new DoWorkEventHandler(worker_DoWork);
            InitAllPortForSecondRun();
            user.Visible = false;
            user.ShowDialog();

        }

        /// <summary>
        /// InitAllPortForSecondRun
        /// </summary>
        private static void InitAllPortForSecondRun()
        {
                SerialPort port;
                string[] ports = new string[20];
                portnumber = 0;
                if (Properties.Settings.Default.IsVirtualPorts)
                {
                    ports = new string[] { "COM20", "COM21", "COM22", "COM23", "COM24", "COM25", "COM26", "COM27" };
                    Program.portnumber=ports.Length;
                }
                else if (Properties.Settings.Default.OpenAllPorts)
                {
                    ports = SerialPort.GetPortNames();
                    Program.PortCount=ports.Length;
                }
                else
                {

                    ports = new string[] { "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9", "COM10", "COM11", "COM12", "COM13", "COM14", "COM15", "COM16" };
                    Program.PortCount = ports.Length;
                }
                List<Device> deviceList = new List<Device>();
                Dictionary<UserPanel, string> panelnames = new Dictionary<UserPanel, string>();
            
                panelForUser=new UserPanel[20];
                foreach (string item in ports)
                {

                    port = new SerialPort(item);
                    UserWindow.userTables.Controls[portnumber].Controls["richTextBox1"].Text = string.Empty;
                
                    if (Convert.ToInt32(port.PortName.Substring(3)) > 8)
                    {
                        UserWindow.userTables.Controls[portnumber].Controls["tbBarcode"].Text = Program.LOT_ID;
                        UserWindow.userTables.Controls[portnumber].Controls["tbBarcode"].Enabled = false;
                        if (snAndRollID.Count > BarcodeNumber)
                        {
                            UserWindow.userTables.Controls[portnumber].Controls["tbBarcode2"].Text = snAndRollID[BarcodeNumber];
                            UserWindow.userTables.Controls[portnumber].Controls["tbBarcode2"].Enabled = false;
                            BarcodeNumber++;
                        }
                        else
                            Trace.TraceError("BarcodeNumber:{0};portnumber:{1}",BarcodeNumber,portnumber);
                    }
                    else if (Convert.ToInt32(port.PortName.Substring(3)) <= 8)
                    {
                        UserWindow.userTables.Controls[portnumber].Controls["tbBarcode"].Text = Program.master_lot_id;
                        UserWindow.userTables.Controls[portnumber].Controls["tbBarcode"].Enabled = false;
                    }
                    portnumber++;
                }
               
        }

        /// <summary>
        /// Create AllPanel for Accuracy
        /// </summary>
        private static void CreateAllPanelForAccuracy()
        {
            Trace.TraceInformation("CreateAllPanelForAccuracy() started");
            CreateTablePanelForUser();
            user = new UserWindow();            
            user.ShowDialog();
            user.BringToFront();
        }

        /// <summary>
        /// Create central panels and initAllPort
        /// </summary>
        private static void CreateCentralUIPanel()
        {
            CreateTablePanel();

            main = new MainWindow();
            counter = new CounterPanel(Program.LotCount);            
            Trace.TraceInformation("Panels creation started");
            CreateTablePanelForUser();
            user = new UserWindow();
            Trace.TraceInformation("MainPanel showed");
            // worker.DoWork += new DoWorkEventHandler(worker_DoWork);
            InitAllPort();
           
            if (Program.measureType != "accuracy")
            {

                foreach (Control item in UserWindow.userTables.Controls)
                {
                    if (item is UserPanel)
                    {
                        foreach (var c in item.Controls)
                        {
                            if (c is TextBox)
                            {
                                if (((TextBox)c).Name == "tbBarcode")
                                {
                                    ((TextBox)c).Text = Program.LOT_ID;
                                    ((TextBox)c).Enabled = false;
                                }
                            }
                        }
                    }
                }
            }
            user.Visible = false;
         
            user.ShowDialog();            
        }




        public static string AccessRight { get; set; }



        public static bool IsLotModified { get; set; }
    }
}
